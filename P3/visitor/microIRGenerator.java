//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

public class microIRGenerator<R,A> implements GJVisitor<R,A> {
   
	private int newtemp = 5001;
	
	private boolean _inHstore = false,
			_cjumplabel = false,
			_noop = false;
	
	
	private class callH {
		public LinkedList<String> callargs;
		public boolean _incall;
		public boolean _inmeth;
		public callH () {
			callargs = new LinkedList<String>();
			_incall = false;
			_inmeth = false;
		}
		public String toString() {
			return callargs.toString();
		}
	}
	
	private Stack<callH> callHierarchy = new Stack<callH>();
	
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            _ret = e.nextElement().accept(this,argu);
            if(!callHierarchy.isEmpty()){
            	if(callHierarchy.lastElement()._incall && !callHierarchy.lastElement()._inmeth) {
            		callHierarchy.lastElement().callargs.add((String)_ret);
            	}
            }
            _count++;
         }
         //if(!callHierarchy.isEmpty())
         //if(callHierarchy.lastElement()._incall)
         //System.err.println(_count);
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() ){
    	  R _ret = n.node.accept(this,argu);
    	  if(_noop) {
    		  println("\t\tNOOP");
    	  }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) {
	   return null; 
   }
   
   private void print(String s) {
	   System.out.print(s);
   }
   
   private void println(String s) {
	   System.out.println(s);
   }

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      println("MAIN");
      
      n.f1.accept(this, null);
      
      n.f2.accept(this, argu);
      println("END");
      
      n.f3.accept(this, null);
      
      n.f4.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      
      _noop = true;
      n.f0.accept(this, null);
      _noop = false;
      
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      print("\n"); 
      n.f0.accept(this, argu);
      
      n.f1.accept(this, argu);
      print("\t\t[");
      
      print((String)n.f2.accept(this, argu));
      
      n.f3.accept(this, argu);
      println("]");
      
      println("BEGIN");
      String ret = (String)n.f4.accept(this, null);
      println("RETURN \n\t\t" + ret);
      println("END");
      
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      println("\t\tNOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      println("\t\tERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      
      _ret = n.f1.accept(this, null);
      
      n.f0.accept(this, argu);
      
      print("\t\tCJUMP " + _ret + " ");
      
      n.f2.accept(this, argu);
      println("");
      
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      
      print("\t\tJUMP "); 
      n.f1.accept(this, argu);
      println("");
      
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null, _ret2=null;
      
      _ret = n.f1.accept(this, null);
      
      _ret2 = n.f3.accept(this, (A)(new Integer(1)));
      
      println("\t\tMOVE TEMP " + newtemp++ + " " + _ret2);
      
      n.f0.accept(this, argu);
      print("\t\tHSTORE " + _ret );
      
      print((String)n.f2.accept(this, argu) + " ");
      
      println("TEMP " + (newtemp-1));
      
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      
      _ret = n.f2.accept(this, null);
      
      n.f0.accept(this, argu);
      print("\t\tHLOAD ");
      
      print((String)n.f1.accept(this, argu) + " "+ _ret+ " ");
      
      println((String)n.f3.accept(this, argu));
      
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      
      _ret = n.f2.accept(this, null);
      
      n.f0.accept(this, argu);
      print("\t\tMOVE ");
      
      print((String)n.f1.accept(this, argu));
      
      println((String)_ret);
      
      return null;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      
      _ret = n.f1.accept(this, null);
      
      n.f0.accept(this, argu);
      println("\t\tPRINT " + _ret);
      
      return null;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n, A argu) {
	   
      R ret = n.f0.accept(this, argu);
      
      return ret;
      
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      
      n.f0.accept(this, argu);
      
      n.f1.accept(this, null);
      
      String ret = (String)n.f3.accept(this, null);
      
      n.f2.accept(this, argu);
      
      n.f4.accept(this, argu);
      
      return (R)ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      int arg1 = newtemp++, arg2 = newtemp++;
      
	  callH newcall = new callH();
	  callHierarchy.push(newcall);
      
      callHierarchy.lastElement()._inmeth = true;
      _ret = n.f1.accept(this, null);
      println("\t\tMOVE TEMP " + arg1 + " " + (String)_ret);
      callHierarchy.lastElement()._inmeth = false;
      
      //System.err.println(callHierarchy.toString());
      callHierarchy.lastElement()._incall = true;
      _ret = n.f3.accept(this, null);
      callHierarchy.lastElement()._incall = false;
      //System.err.println(callHierarchy.toString());
      
      int i=0;
      for(i=0; i<callHierarchy.lastElement().callargs.size(); i++) {
    	  if(callHierarchy.lastElement().callargs.get(i) != null)
    		  println("\t\tMOVE TEMP " + newtemp++ + " " + callHierarchy.lastElement().callargs.get(i) + " ");
      }
      
      n.f0.accept(this, argu);
      print("\t\tMOVE TEMP " + arg2 + " CALL TEMP " + arg1 + " ");
      
      n.f2.accept(this, argu);
      print("(");
      int j=0;
      for(j=0; j<i; j++) {
    	  print(" TEMP " + (newtemp-i+j));
      }
      callHierarchy.pop();
      
      n.f4.accept(this, argu);
      println(" )");
      
      return (R)("TEMP " + arg2);
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n, A argu) {
      int arg1 = newtemp++;
      
      String ret = (String)n.f1.accept(this, null);
      println("\t\tMOVE TEMP " + arg1 + " " + ret);
      
      n.f0.accept(this, argu);
      println("\t\tMOVE TEMP "+ newtemp++ +" HALLOCATE TEMP " + arg1 + " ");
      
      return (R)("TEMP " + Integer.toString(newtemp-1));
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n, A argu) {
      
      int arg1 = newtemp++, arg2 = newtemp++;
      
      String ret = (String)n.f1.accept(this, null);
      println("\t\tMOVE TEMP " + arg1 + " " + ret);
      
      ret = (String)n.f2.accept(this, null);
      println("\t\tMOVE TEMP " + arg2 + " " + ret);
      
      print("\t\tMOVE TEMP " + newtemp++ + " ");
      n.f0.accept(this, argu);
      println("TEMP " + arg1 + " TEMP " + arg2);
      
      return (R)("TEMP " + Integer.toString(newtemp-1) + " ");
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      print(n.f0.choice.toString() + " ");
      
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      
      return (R)("TEMP " + (String)n.f1.accept(this, argu) + " ");
      
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      
      return (R)n.f0.toString();
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      if(argu!=null) {
    	  //System.err.println("xxxxxx");
    	  return (R)n.f0.toString();
      }
      print(n.f0.toString() + " ");
      return _ret;
   }

}
