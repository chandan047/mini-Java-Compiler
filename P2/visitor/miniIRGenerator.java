//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class miniIRGenerator<R> implements GJNoArguVisitor<R> {
   
	private LinkedHashMap<String, LinkedHashMap<String, FunctionSignature>> classTofunctionMap 
		= new LinkedHashMap<String, LinkedHashMap<String, FunctionSignature>>();

	private LinkedHashMap<String,LinkedHashMap<String,String>> classToVarMap = new LinkedHashMap<String,LinkedHashMap<String,String>>();
	private LinkedHashMap<String,LinkedHashMap<String,Integer>> classToVarOffsetMap = new LinkedHashMap<String,LinkedHashMap<String,Integer>>();

	private LinkedHashMap<String, String> extendsMap = new LinkedHashMap<String, String>();

	private boolean fn_flag=false,
					ms_flag=false,
					left_idtfr=false;
	
	private Integer lable=0;
	private Integer _offset;
	private String cl_name,
					fn_name;
	
	public miniIRGenerator (
			LinkedHashMap<String, LinkedHashMap<String, FunctionSignature>> classTofunctionMap,
			LinkedHashMap<String,LinkedHashMap<String,String>> classToVarMap,
			LinkedHashMap<String, String> extendsMap ){
		
		this.classTofunctionMap = classTofunctionMap;
		this.classToVarMap = classToVarMap;
		this.extendsMap = extendsMap;
		
		assign_numbers();
		assign_offsets();
	}
	
	private int NUM=20;

	private boolean msr_flag;
	
	private void assign_numbers(){
		Iterator<String> it = classTofunctionMap.keySet().iterator();
		
		while(it.hasNext()) {
			
			String c_name = it.next();
			LinkedHashMap<String, FunctionSignature> methMap = classTofunctionMap.get(c_name);
			Iterator<String> meth_list = methMap.keySet().iterator();
			
			while(meth_list.hasNext()) {
			
				String f_name = meth_list.next();
				FunctionSignature fs = methMap.get(f_name);
				LinkedHashMap<String,String> varToType = fs.localvar;
				Iterator<String> var_list = varToType.keySet().iterator();
				int i=0;
			
				while(var_list.hasNext()) {
					String var_name = var_list.next();
					if(i<fs.argnum) fs.varNumMap.put(var_name,1 + (i++));
					else fs.varNumMap.put(var_name, NUM++);
				}
			}
		
		}
	
	}
	
	private void assign_offsets() {
		Iterator<String> it = classToVarMap.keySet().iterator();
		
		while(it.hasNext()) {
			String c_name = it.next();
			LinkedHashMap<String,String> classTovar = classToVarMap.get(c_name);
			Iterator<String> var_list = classTovar.keySet().iterator();
			
			int offset = 4;
			LinkedHashMap<String,Integer> offset_Map = new LinkedHashMap<String,Integer>();
			while(var_list.hasNext()) {
				String var_name = var_list.next();
				offset_Map.put(var_name, offset);
				offset += 4;
			}
			classToVarOffsetMap.put(c_name, offset_Map);
		}
		
	}
	
   public R visit(NodeList n) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return null;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      System.out.println("MAIN ");
      n.f14.accept(this);
      System.out.println("END \n");
      n.f15.accept(this);
      n.f16.accept(this);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      fn_flag = false;
      cl_name = (String)n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      fn_flag = false;
      cl_name = (String)n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      fn_flag = false;
      fn_name = (String)n.f2.accept(this);
      
      System.out.println(cl_name + "_" + fn_name + "\t[ " + (classTofunctionMap.get(cl_name).get(fn_name).argnum + 1) + " ]");
      System.out.println(" BEGIN ");
      
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      fn_flag = true;
      n.f8.accept(this);
      n.f9.accept(this);
      System.out.println("RETURN ");
      n.f10.accept(this);
      fn_flag = false;
      n.f11.accept(this);
      n.f12.accept(this);
      
      System.out.println("\nEND ");
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**	=
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n) {
      R _ret=null;
      
      left_idtfr = true; 
      n.f0.accept(this); 
      left_idtfr = false;
      
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      System.out.println("");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n) {
      R _ret=null;
      System.out.println("HSTORE PLUS ");
      
      n.f0.accept(this);
      System.out.println("TIMES 4 ");
      
      n.f1.accept(this);
      String length = (String)n.f2.accept(this);
      System.out.println(length + " ");
      
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n) {
      R _ret=null;
      
      int lable1 = lable++, lable2 = lable++;
      System.out.print("CJUMP ");
      
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      System.out.println(" L" + lable1);
      
      n.f4.accept(this);
      System.out.println("\tJUMP L" + lable2);
      
      System.out.print("\nL" + lable1 + " ");
      n.f5.accept(this);
      n.f6.accept(this);
      
      System.out.println("L" + lable2 + "\tNOOP");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      
      int lable1 = lable++, lable2 = lable++;
      System.out.print("\nL" + lable1 + "\tCJUMP ");
      
      n.f2.accept(this);
      
      System.out.println("L" + lable2);
      
      n.f3.accept(this);
      n.f4.accept(this);
      System.out.print("\tJUMP L" + lable1 + " ");
      
      System.out.println("L" + lable2 + "\tNOOP");
      
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n) {
      R _ret=null;
      n.f0.accept(this);
      
      System.out.print("\tPRINT ");
      
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;
      return (R)n.f0.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n) {
	   System.out.print("TIMES ");
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n) {
	   System.out.print("LT ");
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n) {
	   System.out.print("PLUS ");
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n) {
	   System.out.print("MINUS ");
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n) {
	   System.out.print("TIMES ");
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n) {
      R _ret=null;
      System.out.println(" BEGIN");
      int temp = NUM++;
      System.out.print("\tHLOAD TEMP " + temp + " PLUS " );	
      n.f0.accept(this);
      n.f1.accept(this);
      ms_flag = true;
      System.out.println("TIMES 4 ");
      n.f2.accept(this);
      ms_flag = false;	
      System.out.println("\tRETURN TEMP " + temp);
      System.out.println("END");
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n) {
      R _ret=null;
      System.out.println(" BEGIN");
      int temp = NUM++;
      System.out.print("\tHLOAD TEMP " + temp + " MINUS ");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      
      System.out.println("4\n\tRETURN TEMP" + temp);
      System.out.print("END " );
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n) {
      R _ret=null;
      System.out.println("CALL ");
      System.out.println(" BEGIN ");
      
      int objTemp = NUM++;
      System.out.println("\tMOVE TEMP " + objTemp + " " );
      
      ms_flag = true;
      String obj_type = (String)n.f0.accept(this);
      ms_flag = false;
      
      n.f1.accept(this);
      msr_flag = true;
      String fnc_name = (String)n.f2.accept(this);
      msr_flag = false;
      
      int fnTemp = NUM++, calledfn = NUM++, fnoffset = 4;
      System.out.println("\tHLOAD TEMP " + fnTemp + " TEMP " + objTemp + " 0 ");
      
      //System.out.println(obj_type + " " + fnc_name +"------------------");
      Iterator<String> fn_list = classTofunctionMap.get(obj_type).keySet().iterator();
      int offset = 0;
      while(fn_list.next()!=fnc_name) 
    	  offset += 4;
      System.out.println("\tHLOAD TEMP " + NUM + " TEMP " + fnTemp + " " + offset + " ");
      System.out.println(" RETURN\nTEMP " + NUM++);
      System.out.println("END");
      
      System.out.print("(" + " TEMP " + objTemp + " " );
      
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      
      System.out.println(" )");
      return (R)classTofunctionMap.get(obj_type).get(fnc_name).retType;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;
      return n.f0.accept(this);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      n.f0.accept(this);
      System.out.print(" " +n.f0.toString() + " ");
      return (R)n.f0.toString();
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n) {
      n.f0.accept(this);
      System.out.print(" " +"1 ");
      return (R)"1";
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n) {
      n.f0.accept(this);
      System.out.print(" "+"0 ");
      return (R)"0";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   @SuppressWarnings("unchecked")
public R visit(Identifier n) {
	   n.f0.accept(this);
      String _ret = (String)n.f0.toString();
      //System.out.println(_ret + " ---------- ");
      if(fn_flag && ms_flag) {
    	  //System.out.println("------" +cl_name + "-------" + fn_name + "------" + _ret);
    	  if(classTofunctionMap.get(cl_name).get(fn_name).localvar.containsKey(_ret)){
	    	  Integer index = classTofunctionMap.get(cl_name).get(fn_name).varNumMap.get(_ret);
	    	  System.out.print("TEMP " + index + " ");
	    	  return (R)classTofunctionMap.get(cl_name).get(fn_name).localvar.get(_ret);
    	  }
    	  else {
    		  _offset = classToVarOffsetMap.get(cl_name).get(_ret);
    		  System.out.println(_offset + " -------------------------------------------------- ");
    		  System.out.println("\n BEGIN\n\tHLOAD TEMP " + NUM + " TEMP 0 " + _offset);
    		  System.out.println(" RETURN\n TEMP " + NUM++ );
    		  System.out.println("END");
    		  return (R)classToVarMap.get(cl_name).get(_ret);
    	  }
      }
      
      else if(fn_flag && msr_flag) {
    	  
      }
      
      else if(fn_flag && left_idtfr) {
    	  if(classTofunctionMap.get(cl_name).get(fn_name).localvar.containsKey(_ret)){
	    	  Integer index = classTofunctionMap.get(cl_name).get(fn_name).varNumMap.get(_ret);
	    	  System.out.print("MOVE TEMP "+ index + " ");
    	  }
    	  else {
    		  _offset = classToVarOffsetMap.get(cl_name).get(_ret);
    		  System.out.println(" \tHSTORE TEMP 0" + _offset );
    	  }
      }
      
      else if(fn_flag) {
    	  if(classTofunctionMap.get(cl_name).get(fn_name).localvar.containsKey(_ret)){
	    	  Integer index = classTofunctionMap.get(cl_name).get(fn_name).varNumMap.get(_ret);
	    	  System.out.print("TEMP " + index + " ");
    	  }
    	  else {
    		  //System.out.println("------" +cl_name + "-------" + fn_name + "------" + _ret);
    		  Iterator<String> it = classToVarMap.get(cl_name).keySet().iterator();
    		  _offset = 0;
    		  while(it.next()!=_ret)
    			  _offset+=4;
    		  System.out.println(" BEGIN\n\tHLOAD TEMP " + NUM + " TEMP 0 " + _offset);
    		  System.out.println(" RETURN\n TEMP " + NUM++ );
    		  System.out.println("END");
    	  }
      }
      
      return (R)_ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n) {
      R _ret=null;
      //if(ms_flag)
      System.out.print("TEMP 0 ");
      n.f0.accept(this);
      return (R)cl_name;
   }

   /** 
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String length = (String)n.f3.accept(this) ;
      n.f4.accept(this);
      
      System.out.println(" BEGIN");
      int arrTemp = NUM++;
      System.out.println("\tMOVE TEMP " + arrTemp + " HALLOCATE TIMES 4 PLUS 1 " + length);
      System.out.println("\tHSTORE TEMP " + arrTemp + " 0 " + length );
      System.out.println("\tMOVE TEMP " + arrTemp + " PLUS 4 " + arrTemp );System.out.println();
      System.out.println(" RETURN TEMP " + arrTemp);
      System.out.println(" END");
      
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   @SuppressWarnings("unchecked")
public R visit(AllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      fn_flag = false;
      String c_name = (String)n.f1.accept(this);
      fn_flag = true;
      n.f2.accept(this);
      n.f3.accept(this);
      
      System.out.println(" BEGIN");
      int fnTemp = NUM++; 
      int n_fun = 4*classTofunctionMap.get(c_name).size();
      System.out.println("\tMOVE TEMP " + fnTemp + " HALLOCATE " + n_fun);
      int clTemp = NUM++;
      int n_feilds = 4*(classToVarMap.get(c_name).size() + 1);
      System.out.println("\tMOVE TEMP " + clTemp + " HALLOCATE " + (n_feilds));
      
      int i=0;
      Iterator<String> it = classTofunctionMap.get(c_name).keySet().iterator();
      while(it.hasNext()) {
    	  System.out.println("\tHSTORE TEMP " + fnTemp + " " + i + " " + c_name + "_" + it.next());
    	  i += 4;
      }
      
      if(n_feilds>4) {
    	  int loop = NUM++;
    	  int lable1 = lable++, lable2 = lable++;
    	  System.out.println("\tMOVE TEMP " + loop + " 4 ");
    	  System.out.println("L" + lable1 + "\tCJUMP  LT TEMP " + loop + " " + n_feilds + " L" + lable2);
    	  System.out.println("\tHSTORE  PLUS TEMP " + clTemp + " TEMP " + loop + " 0 0 ");
    	  System.out.println("\tMOVE TEMP " + loop + " PLUS TEMP" + loop + " 4 " );
    	  System.out.println("\tJUMP L" + lable1);
    	  System.out.print("L" + lable2);
      }
      
      System.out.println("\tHSTORE TEMP " + clTemp + " 0 " + "TEMP " + fnTemp);
      System.out.println(" RETURN");
      System.out.println("TEMP " + clTemp);
      System.out.println("END");
      
      return (R)c_name;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n) {
	   System.out.print("MINUS 1 ");
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /** CHECK
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n) {
      n.f0.accept(this);
      R _ret=n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

}
